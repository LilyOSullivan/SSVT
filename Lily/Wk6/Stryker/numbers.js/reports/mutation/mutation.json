{"files":{"/Users/lily/Dropbox/Mac (2)/Documents/Github/SSVT/Lily/Wk6/numbers.js/lib/numbers/basic.js":{"language":"javascript","mutants":[{"id":"144","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":61,"line":147},"start":{"column":32,"line":147}}},{"id":"162","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":172},"start":{"column":27,"line":170}}},{"id":"211","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":2,"line":225},"start":{"column":55,"line":208}}},{"id":"212","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":23,"line":209},"start":{"column":7,"line":209}}},{"id":"213","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":23,"line":209},"start":{"column":7,"line":209}}},{"id":"214","mutatorName":"EqualityOperator","replacement":"arr.length !== 0","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":23,"line":209},"start":{"column":7,"line":209}}},{"id":"215","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":211},"start":{"column":25,"line":209}}},{"id":"216","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":34,"line":210},"start":{"column":21,"line":210}}},{"id":"217","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":52,"line":211},"start":{"column":14,"line":211}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":52,"line":211},"start":{"column":14,"line":211}}},{"id":"219","mutatorName":"LogicalOperator","replacement":"quant > arr.length || !allowDuplicates","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":52,"line":211},"start":{"column":14,"line":211}}},{"id":"220","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":32,"line":211},"start":{"column":14,"line":211}}},{"id":"221","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":32,"line":211},"start":{"column":14,"line":211}}},{"id":"222","mutatorName":"EqualityOperator","replacement":"quant >= arr.length","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":32,"line":211},"start":{"column":14,"line":211}}},{"id":"223","mutatorName":"EqualityOperator","replacement":"quant <= arr.length","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":32,"line":211},"start":{"column":14,"line":211}}},{"id":"224","mutatorName":"BooleanLiteral","replacement":"allowDuplicates","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":52,"line":211},"start":{"column":36,"line":211}}},{"id":"225","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":213},"start":{"column":54,"line":211}}},{"id":"226","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":63,"line":212},"start":{"column":21,"line":212}}},{"id":"227","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":31,"line":215},"start":{"column":7,"line":215}}},{"id":"228","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":31,"line":215},"start":{"column":7,"line":215}}},{"id":"229","mutatorName":"EqualityOperator","replacement":"allowDuplicates !== true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":31,"line":215},"start":{"column":7,"line":215}}},{"id":"230","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":31,"line":215},"start":{"column":27,"line":215}}},{"id":"231","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":222},"start":{"column":33,"line":215}}},{"id":"232","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":20,"line":216},"start":{"column":18,"line":216}}},{"id":"233","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":26,"line":218},"start":{"column":17,"line":218}}},{"id":"234","mutatorName":"EqualityOperator","replacement":"i <= quant","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":26,"line":218},"start":{"column":17,"line":218}}},{"id":"235","mutatorName":"EqualityOperator","replacement":"i >= quant","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":26,"line":218},"start":{"column":17,"line":218}}},{"id":"236","mutatorName":"UpdateOperator","replacement":"i--","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":31,"line":218},"start":{"column":28,"line":218}}},{"id":"237","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":220},"start":{"column":33,"line":218}}},{"id":"238","mutatorName":"ArithmeticOperator","replacement":"Math.random() / arr.length","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":60,"line":219},"start":{"column":34,"line":219}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":224},"start":{"column":10,"line":222}}},{"id":"240","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":2,"line":246},"start":{"column":34,"line":233}}},{"id":"241","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":11,"line":237},"start":{"column":10,"line":237}}},{"id":"242","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":243},"start":{"column":13,"line":237}}},{"id":"243","mutatorName":"ArithmeticOperator","replacement":"Math.random() / m--","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":39,"line":238},"start":{"column":20,"line":238}}},{"id":"244","mutatorName":"UpdateOperator","replacement":"m++","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":39,"line":238},"start":{"column":36,"line":238}}},{"id":"266","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":268},"start":{"column":22,"line":266}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":293},"start":{"column":22,"line":291}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":313},"start":{"column":30,"line":310}}},{"id":"295","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":22,"line":311},"start":{"column":12,"line":311}}},{"id":"296","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":22,"line":311},"start":{"column":12,"line":311}}},{"id":"297","mutatorName":"LogicalOperator","replacement":"start && 0","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":22,"line":311},"start":{"column":12,"line":311}}},{"id":"326","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":61,"line":351},"start":{"column":31,"line":351}}},{"id":"332","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":85,"line":352},"start":{"column":59,"line":352}}},{"id":"355","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":127,"line":368},"start":{"column":102,"line":368}}},{"id":"361","mutatorName":"ArithmeticOperator","replacement":"Math.pow(a, b) * m","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":40,"line":370},"start":{"column":22,"line":370}}},{"id":"365","mutatorName":"ArithmeticOperator","replacement":"1 * m","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":28,"line":371},"start":{"column":23,"line":371}}},{"id":"521","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":481},"start":{"column":14,"line":479}}},{"id":"522","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":50,"line":480},"start":{"column":21,"line":480}}},{"id":"533","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":501},"start":{"column":15,"line":499}}},{"id":"534","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":59,"line":500},"start":{"column":21,"line":500}}},{"id":"539","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":4,"line":504},"start":{"column":14,"line":502}}},{"id":"540","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":50,"line":503},"start":{"column":21,"line":503}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 6","status":"Killed","estimatedNetTime":1825,"hitCount":138,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":2,"line":43},"start":{"column":28,"line":29}}},{"id":"2","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1825,"hitCount":138,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":63,"line":30},"start":{"column":7,"line":30}}},{"id":"1","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1825,"hitCount":138,"static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["0","1","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":63,"line":30},"start":{"column":7,"line":30}}},{"id":"3","mutatorName":"EqualityOperator","replacement":"Object.prototype.toString.call(arr) !== '[object Array]'","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1825,"hitCount":138,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":63,"line":30},"start":{"column":7,"line":30}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1825,"hitCount":138,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":63,"line":30},"start":{"column":47,"line":30}}},{"id":"6","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"0 == 6","status":"Killed","estimatedNetTime":1824,"hitCount":6904782,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":35,"line":32},"start":{"column":21,"line":32}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 6","status":"Killed","estimatedNetTime":1824,"hitCount":137,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":4,"line":40},"start":{"column":65,"line":30}}},{"id":"7","mutatorName":"EqualityOperator","replacement":"i <= arr.length","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1824,"hitCount":6904782,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":35,"line":32},"start":{"column":21,"line":32}}},{"id":"8","mutatorName":"EqualityOperator","replacement":"i >= arr.length","statusReason":"0 == 6","status":"Killed","estimatedNetTime":1824,"hitCount":6904782,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":35,"line":32},"start":{"column":21,"line":32}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"0 == 6","status":"Killed","estimatedNetTime":1824,"hitCount":6904646,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":6,"line":38},"start":{"column":42,"line":32}}},{"id":"9","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1824,"hitCount":6904645,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":40,"line":32},"start":{"column":37,"line":32}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1824,"hitCount":6904646,"static":false,"testsCompleted":2,"killedBy":["2"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":39,"line":33},"start":{"column":11,"line":33}}},{"id":"12","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1824,"hitCount":6904646,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":39,"line":33},"start":{"column":11,"line":33}}},{"id":"13","mutatorName":"EqualityOperator","replacement":"typeof arr[i] !== 'number'","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1824,"hitCount":6904646,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":39,"line":33},"start":{"column":11,"line":33}}},{"id":"14","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1824,"hitCount":6904646,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":39,"line":33},"start":{"column":31,"line":33}}},{"id":"15","mutatorName":"BlockStatement","replacement":"{}","statusReason":"0 == 6","status":"Killed","estimatedNetTime":1824,"hitCount":6904645,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":8,"line":35},"start":{"column":41,"line":33}}},{"id":"16","mutatorName":"ArithmeticOperator","replacement":"total - arr[i]","statusReason":"-6 == 6","status":"Killed","estimatedNetTime":1824,"hitCount":6904645,"static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","2","116","117","118","119","120","121","122","132","133","134","135","136","137"],"location":{"end":{"column":31,"line":34},"start":{"column":17,"line":34}}},{"id":"17","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":8,"line":37},"start":{"column":14,"line":35}}},{"id":"18","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /All elements in array must be numbers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":64,"line":36},"start":{"column":25,"line":36}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":4,"line":42},"start":{"column":10,"line":40}}},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":50,"line":41},"start":{"column":21,"line":41}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 5","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","4","5","6"],"location":{"end":{"column":2,"line":70},"start":{"column":36,"line":53}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error: All elements in array must be numbers'\n","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":2,"killedBy":["4"],"coveredBy":["3","4","5","6"],"location":{"end":{"column":63,"line":54},"start":{"column":7,"line":54}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","4","5","6"],"location":{"end":{"column":63,"line":54},"start":{"column":7,"line":54}}},{"id":"24","mutatorName":"EqualityOperator","replacement":"Object.prototype.toString.call(arr) !== '[object Array]'","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","4","5","6"],"location":{"end":{"column":63,"line":54},"start":{"column":7,"line":54}}},{"id":"25","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","4","5","6"],"location":{"end":{"column":63,"line":54},"start":{"column":47,"line":54}}},{"id":"26","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 5","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","5","6"],"location":{"end":{"column":4,"line":67},"start":{"column":65,"line":54}}},{"id":"27","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","5","6"],"location":{"end":{"column":36,"line":56},"start":{"column":9,"line":56}}},{"id":"28","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["3","5","6"],"location":{"end":{"column":36,"line":56},"start":{"column":9,"line":56}}},{"id":"29","mutatorName":"EqualityOperator","replacement":"typeof total === 'number'","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","5","6"],"location":{"end":{"column":36,"line":56},"start":{"column":9,"line":56}}},{"id":"30","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","5","6"],"location":{"end":{"column":36,"line":56},"start":{"column":28,"line":56}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":6,"line":58},"start":{"column":38,"line":56}}},{"id":"32","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /All elements in array must be numbers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":62,"line":57},"start":{"column":23,"line":57}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":6,"static":false,"testsCompleted":2,"killedBy":["6"],"coveredBy":["3","6"],"location":{"end":{"column":52,"line":59},"start":{"column":42,"line":59}}},{"id":"34","mutatorName":"EqualityOperator","replacement":"i <= length","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","6"],"location":{"end":{"column":52,"line":59},"start":{"column":42,"line":59}}},{"id":"35","mutatorName":"EqualityOperator","replacement":"i >= length","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":6,"static":false,"testsCompleted":2,"killedBy":["6"],"coveredBy":["3","6"],"location":{"end":{"column":52,"line":59},"start":{"column":42,"line":59}}},{"id":"36","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","6"],"location":{"end":{"column":57,"line":59},"start":{"column":54,"line":59}}},{"id":"37","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":2,"killedBy":["6"],"coveredBy":["3","6"],"location":{"end":{"column":6,"line":65},"start":{"column":59,"line":59}}},{"id":"38","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":2,"killedBy":["6"],"coveredBy":["3","6"],"location":{"end":{"column":39,"line":60},"start":{"column":11,"line":60}}},{"id":"39","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","6"],"location":{"end":{"column":39,"line":60},"start":{"column":11,"line":60}}},{"id":"40","mutatorName":"EqualityOperator","replacement":"typeof arr[i] !== 'number'","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","6"],"location":{"end":{"column":39,"line":60},"start":{"column":11,"line":60}}},{"id":"41","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","6"],"location":{"end":{"column":39,"line":60},"start":{"column":31,"line":60}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":2,"coveredBy":["3","6"],"location":{"end":{"column":8,"line":62},"start":{"column":41,"line":60}}},{"id":"43","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":8,"line":64},"start":{"column":14,"line":62}}},{"id":"44","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /All elements in array must be numbers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":64,"line":63},"start":{"column":25,"line":63}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":4,"line":69},"start":{"column":10,"line":67}}},{"id":"46","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":50,"line":68},"start":{"column":21,"line":68}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 24","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8","10"],"location":{"end":{"column":2,"line":95},"start":{"column":32,"line":78}}},{"id":"48","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error: All elements in array must be numbers'\n","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["7","8","10"],"location":{"end":{"column":63,"line":79},"start":{"column":7,"line":79}}},{"id":"49","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8","10"],"location":{"end":{"column":63,"line":79},"start":{"column":7,"line":79}}},{"id":"50","mutatorName":"EqualityOperator","replacement":"Object.prototype.toString.call(arr) !== '[object Array]'","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8","10"],"location":{"end":{"column":63,"line":79},"start":{"column":7,"line":79}}},{"id":"51","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8","10"],"location":{"end":{"column":63,"line":79},"start":{"column":47,"line":79}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 24","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":4,"line":92},"start":{"column":65,"line":79}}},{"id":"53","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":36,"line":81},"start":{"column":9,"line":81}}},{"id":"54","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["10"],"coveredBy":["7","10"],"location":{"end":{"column":36,"line":81},"start":{"column":9,"line":81}}},{"id":"55","mutatorName":"EqualityOperator","replacement":"typeof total === 'number'","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":36,"line":81},"start":{"column":9,"line":81}}},{"id":"56","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":36,"line":81},"start":{"column":28,"line":81}}},{"id":"57","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":6,"line":83},"start":{"column":38,"line":81}}},{"id":"58","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /All elements in array must be numbers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":62,"line":82},"start":{"column":23,"line":82}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":8,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":52,"line":84},"start":{"column":42,"line":84}}},{"id":"60","mutatorName":"EqualityOperator","replacement":"i <= length","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":8,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":52,"line":84},"start":{"column":42,"line":84}}},{"id":"61","mutatorName":"EqualityOperator","replacement":"i >= length","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":8,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":52,"line":84},"start":{"column":42,"line":84}}},{"id":"62","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":57,"line":84},"start":{"column":54,"line":84}}},{"id":"63","mutatorName":"BlockStatement","replacement":"{}","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":6,"line":90},"start":{"column":59,"line":84}}},{"id":"64","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["7","10"],"location":{"end":{"column":39,"line":85},"start":{"column":11,"line":85}}},{"id":"65","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":39,"line":85},"start":{"column":11,"line":85}}},{"id":"66","mutatorName":"EqualityOperator","replacement":"typeof arr[i] !== 'number'","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":39,"line":85},"start":{"column":11,"line":85}}},{"id":"67","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"All elements in array must be numbers","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":39,"line":85},"start":{"column":31,"line":85}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":8,"line":87},"start":{"column":41,"line":85}}},{"id":"69","mutatorName":"ArithmeticOperator","replacement":"total / arr[i]","statusReason":"0.041666666666666664 == 24","status":"Killed","estimatedNetTime":1,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","10"],"location":{"end":{"column":31,"line":86},"start":{"column":17,"line":86}}},{"id":"70","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":8,"line":89},"start":{"column":14,"line":87}}},{"id":"71","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /All elements in array must be numbers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":64,"line":88},"start":{"column":25,"line":88}}},{"id":"72","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":4,"line":94},"start":{"column":10,"line":92}}},{"id":"73","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":50,"line":93},"start":{"column":21,"line":93}}},{"id":"74","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 16","status":"Killed","estimatedNetTime":1,"hitCount":46,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","135","136"],"location":{"end":{"column":2,"line":110},"start":{"column":31,"line":103}}},{"id":"75","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":46,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","135","136"],"location":{"end":{"column":32,"line":104},"start":{"column":7,"line":104}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":46,"static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["11","12","135","136"],"location":{"end":{"column":32,"line":104},"start":{"column":7,"line":104}}},{"id":"77","mutatorName":"EqualityOperator","replacement":"typeof num === 'number'","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":46,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","135","136"],"location":{"end":{"column":32,"line":104},"start":{"column":7,"line":104}}},{"id":"78","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":46,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","135","136"],"location":{"end":{"column":32,"line":104},"start":{"column":24,"line":104}}},{"id":"79","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":4,"line":106},"start":{"column":34,"line":104}}},{"id":"80","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":46,"line":105},"start":{"column":21,"line":105}}},{"id":"81","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 16","status":"Killed","estimatedNetTime":1,"hitCount":45,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","135","136"],"location":{"end":{"column":4,"line":108},"start":{"column":10,"line":106}}},{"id":"82","mutatorName":"ArithmeticOperator","replacement":"num / num","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":45,"static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","135","136"],"location":{"end":{"column":21,"line":107},"start":{"column":12,"line":107}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 10","status":"Killed","estimatedNetTime":2,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":2,"line":137},"start":{"column":34,"line":119}}},{"id":"84","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","estimatedNetTime":2,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":15,"line":121},"start":{"column":13,"line":121}}},{"id":"85","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 10","status":"Killed","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":4,"line":134},"start":{"column":28,"line":123}}},{"id":"86","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":59,"line":124},"start":{"column":9,"line":124}}},{"id":"87","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":59,"line":124},"start":{"column":9,"line":124}}},{"id":"88","mutatorName":"LogicalOperator","replacement":"typeof n !== 'number' || typeof k !== 'number'","status":"Survived","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":59,"line":124},"start":{"column":9,"line":124}}},{"id":"89","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":124},"start":{"column":9,"line":124}}},{"id":"90","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":124},"start":{"column":9,"line":124}}},{"id":"91","mutatorName":"EqualityOperator","replacement":"typeof n === 'number'","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":124},"start":{"column":9,"line":124}}},{"id":"92","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","estimatedNetTime":2,"hitCount":142,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":124},"start":{"column":24,"line":124}}},{"id":"93","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":59,"line":124},"start":{"column":36,"line":124}}},{"id":"94","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":59,"line":124},"start":{"column":36,"line":124}}},{"id":"95","mutatorName":"EqualityOperator","replacement":"typeof k === 'number'","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":59,"line":124},"start":{"column":36,"line":124}}},{"id":"96","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["13"],"location":{"end":{"column":59,"line":124},"start":{"column":51,"line":124}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'RangeError: Maximum call stack size exceeded'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":6,"line":126},"start":{"column":61,"line":124}}},{"id":"98","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be a number/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":48,"line":125},"start":{"column":23,"line":125}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"1 == 10","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":9,"line":127}}},{"id":"100","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":9,"line":127}}},{"id":"101","mutatorName":"LogicalOperator","replacement":"n >= 0 || k === 0","statusReason":"1 == 10","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":9,"line":127}}},{"id":"102","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":15,"line":127},"start":{"column":9,"line":127}}},{"id":"103","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":15,"line":127},"start":{"column":9,"line":127}}},{"id":"104","mutatorName":"EqualityOperator","replacement":"n > 0","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":15,"line":127},"start":{"column":9,"line":127}}},{"id":"105","mutatorName":"EqualityOperator","replacement":"n < 0","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":15,"line":127},"start":{"column":9,"line":127}}},{"id":"106","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"1 == 10","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":19,"line":127}}},{"id":"107","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":19,"line":127}}},{"id":"108","mutatorName":"EqualityOperator","replacement":"k !== 0","statusReason":"1 == 10","status":"Killed","estimatedNetTime":2,"hitCount":141,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":26,"line":127},"start":{"column":19,"line":127}}},{"id":"109","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"0 == 10","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":9,"line":128}}},{"id":"110","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":9,"line":128}}},{"id":"111","mutatorName":"LogicalOperator","replacement":"n === 0 || k > 0","statusReason":"0 == 10","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":9,"line":128}}},{"id":"112","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"0 == 10","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":16,"line":128},"start":{"column":9,"line":128}}},{"id":"113","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":16,"line":128},"start":{"column":9,"line":128}}},{"id":"114","mutatorName":"EqualityOperator","replacement":"n !== 0","statusReason":"0 == 10","status":"Killed","estimatedNetTime":2,"hitCount":129,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":16,"line":128},"start":{"column":9,"line":128}}},{"id":"115","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":2,"hitCount":54,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":20,"line":128}}},{"id":"116","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":54,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":20,"line":128}}},{"id":"117","mutatorName":"EqualityOperator","replacement":"k >= 0","status":"Survived","estimatedNetTime":2,"hitCount":54,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":20,"line":128}}},{"id":"118","mutatorName":"EqualityOperator","replacement":"k <= 0","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":54,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":25,"line":128},"start":{"column":20,"line":128}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading '3')","status":"Killed","estimatedNetTime":2,"hitCount":75,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":9,"line":129}}},{"id":"120","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":75,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":9,"line":129}}},{"id":"121","mutatorName":"LogicalOperator","replacement":"arr[n] || arr[n][k] > 0","statusReason":"Cannot read properties of undefined (reading '3')","status":"Killed","estimatedNetTime":2,"hitCount":75,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":9,"line":129}}},{"id":"122","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NaN == 10","status":"Killed","estimatedNetTime":2,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":19,"line":129}}},{"id":"123","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":55,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":19,"line":129}}},{"id":"124","mutatorName":"EqualityOperator","replacement":"arr[n][k] >= 0","status":"Survived","estimatedNetTime":2,"hitCount":55,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":19,"line":129}}},{"id":"125","mutatorName":"EqualityOperator","replacement":"arr[n][k] <= 0","status":"Survived","estimatedNetTime":2,"hitCount":55,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":32,"line":129},"start":{"column":19,"line":129}}},{"id":"126","mutatorName":"BooleanLiteral","replacement":"arr[n]","statusReason":"Cannot set properties of undefined (setting '1')","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":16,"line":130},"start":{"column":9,"line":130}}},{"id":"127","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":16,"line":130},"start":{"column":9,"line":130}}},{"id":"128","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot set properties of undefined (setting '1')","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":16,"line":130},"start":{"column":9,"line":130}}},{"id":"129","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":2,"coveredBy":["13","34"],"location":{"end":{"column":29,"line":130},"start":{"column":27,"line":130}}},{"id":"131","mutatorName":"ArithmeticOperator","replacement":"n + 1","statusReason":"75 == 10","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":32,"line":132},"start":{"column":27,"line":132}}},{"id":"130","mutatorName":"ArithmeticOperator","replacement":"_binomial(n - 1, k - 1) - _binomial(n - 1, k)","statusReason":"4 == 10","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":62,"line":132},"start":{"column":17,"line":132}}},{"id":"132","mutatorName":"ArithmeticOperator","replacement":"k + 1","statusReason":"0 == 10","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":39,"line":132},"start":{"column":34,"line":132}}},{"id":"133","mutatorName":"ArithmeticOperator","replacement":"n + 1","statusReason":"Maximum call stack size exceeded","status":"Killed","estimatedNetTime":2,"hitCount":68,"static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","34"],"location":{"end":{"column":58,"line":132},"start":{"column":53,"line":132}}},{"id":"134","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 24","status":"Killed","estimatedNetTime":1,"hitCount":7,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":2,"line":156},"start":{"column":34,"line":145}}},{"id":"135","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":7,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":32,"line":146},"start":{"column":7,"line":146}}},{"id":"136","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"/Input must not be negative/","status":"Killed","estimatedNetTime":1,"hitCount":7,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":32,"line":146},"start":{"column":7,"line":146}}},{"id":"137","mutatorName":"EqualityOperator","replacement":"typeof num === 'number'","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":7,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":32,"line":146},"start":{"column":7,"line":146}}},{"id":"138","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Input must be a number.","status":"Killed","estimatedNetTime":1,"hitCount":7,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":32,"line":146},"start":{"column":24,"line":146}}},{"id":"139","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"/Input must not be negative/","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":75,"line":146},"start":{"column":50,"line":146}}},{"id":"140","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must not be negative.","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":14,"line":147},"start":{"column":7,"line":147}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["14","34"],"location":{"end":{"column":14,"line":147},"start":{"column":7,"line":147}}},{"id":"142","mutatorName":"EqualityOperator","replacement":"num <= 0","statusReason":"Input must not be negative.","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"killedBy":["34"],"coveredBy":["14","34"],"location":{"end":{"column":14,"line":147},"start":{"column":7,"line":147}}},{"id":"143","mutatorName":"EqualityOperator","replacement":"num >= 0","statusReason":"Input must not be negative.","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":14,"line":147},"start":{"column":7,"line":147}}},{"id":"145","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":18,"line":151},"start":{"column":10,"line":151}}},{"id":"146","mutatorName":"EqualityOperator","replacement":"i < num","statusReason":"6 == 24","status":"Killed","estimatedNetTime":1,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":18,"line":151},"start":{"column":10,"line":151}}},{"id":"147","mutatorName":"EqualityOperator","replacement":"i > num","statusReason":"1 == 24","status":"Killed","estimatedNetTime":1,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","34"],"location":{"end":{"column":18,"line":151},"start":{"column":10,"line":151}}},{"id":"148","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (1401/1400)","status":"Timeout","estimatedNetTime":1,"hitCount":14,"static":false,"coveredBy":["14","34"],"location":{"end":{"column":4,"line":153},"start":{"column":20,"line":151}}},{"id":"149","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"Hit limit reached (1401/1400)","status":"Timeout","estimatedNetTime":1,"hitCount":14,"static":false,"coveredBy":["14","34"],"location":{"end":{"column":13,"line":152},"start":{"column":10,"line":152}}},{"id":"150","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":2,"line":187},"start":{"column":29,"line":165}}},{"id":"151","mutatorName":"UnaryOperator","replacement":"-a","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":9,"line":167},"start":{"column":7,"line":167}}},{"id":"152","mutatorName":"UnaryOperator","replacement":"-b","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":9,"line":168},"start":{"column":7,"line":168}}},{"id":"153","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":7,"line":170}}},{"id":"154","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":7,"line":170}}},{"id":"155","mutatorName":"LogicalOperator","replacement":"a !== a && b !== b","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":7,"line":170}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":14,"line":170},"start":{"column":7,"line":170}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":14,"line":170},"start":{"column":7,"line":170}}},{"id":"158","mutatorName":"EqualityOperator","replacement":"a === a","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":14,"line":170},"start":{"column":7,"line":170}}},{"id":"159","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":18,"line":170}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":18,"line":170}}},{"id":"161","mutatorName":"EqualityOperator","replacement":"b === b","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":25,"line":170},"start":{"column":18,"line":170}}},{"id":"163","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":7,"line":174}}},{"id":"164","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":7,"line":174}}},{"id":"165","mutatorName":"LogicalOperator","replacement":"(a === Infinity || a === -Infinity || b === Infinity) && b === -Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":7,"line":174}}},{"id":"166","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":7,"line":174}}},{"id":"167","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":7,"line":174}}},{"id":"168","mutatorName":"LogicalOperator","replacement":"(a === Infinity || a === -Infinity) && b === Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":7,"line":174}}},{"id":"169","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":7,"line":174}}},{"id":"170","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":7,"line":174}}},{"id":"171","mutatorName":"LogicalOperator","replacement":"a === Infinity && a === -Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":7,"line":174}}},{"id":"172","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":21,"line":174},"start":{"column":7,"line":174}}},{"id":"173","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":21,"line":174},"start":{"column":7,"line":174}}},{"id":"174","mutatorName":"EqualityOperator","replacement":"a !== Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":20,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":21,"line":174},"start":{"column":7,"line":174}}},{"id":"175","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":25,"line":174}}},{"id":"176","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":25,"line":174}}},{"id":"177","mutatorName":"EqualityOperator","replacement":"a !== -Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":25,"line":174}}},{"id":"178","mutatorName":"UnaryOperator","replacement":"+Infinity","status":"Survived","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":4,"coveredBy":["15","16","17","109"],"location":{"end":{"column":40,"line":174},"start":{"column":31,"line":174}}},{"id":"179","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":44,"line":174}}},{"id":"180","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":3,"killedBy":["17"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":44,"line":174}}},{"id":"181","mutatorName":"EqualityOperator","replacement":"b !== Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":19,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":58,"line":174},"start":{"column":44,"line":174}}},{"id":"182","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":18,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":62,"line":174}}},{"id":"183","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":18,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":62,"line":174}}},{"id":"185","mutatorName":"UnaryOperator","replacement":"+Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":18,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":68,"line":174}}},{"id":"184","mutatorName":"EqualityOperator","replacement":"b !== -Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":18,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":77,"line":174},"start":{"column":62,"line":174}}},{"id":"186","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":4,"line":176},"start":{"column":79,"line":174}}},{"id":"187","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":37,"line":178},"start":{"column":7,"line":178}}},{"id":"188","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":37,"line":178},"start":{"column":7,"line":178}}},{"id":"189","mutatorName":"LogicalOperator","replacement":"a % 1 !== 0 && b % 1 !== 0","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":37,"line":178},"start":{"column":7,"line":178}}},{"id":"190","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":19,"line":178},"start":{"column":8,"line":178}}},{"id":"191","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":19,"line":178},"start":{"column":8,"line":178}}},{"id":"192","mutatorName":"EqualityOperator","replacement":"a % 1 === 0","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":19,"line":178},"start":{"column":8,"line":178}}},{"id":"193","mutatorName":"ArithmeticOperator","replacement":"a * 1","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":16,"static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16","17","109"],"location":{"end":{"column":13,"line":178},"start":{"column":8,"line":178}}},{"id":"194","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":36,"line":178},"start":{"column":25,"line":178}}},{"id":"195","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":3,"coveredBy":["16","17","109"],"location":{"end":{"column":36,"line":178},"start":{"column":25,"line":178}}},{"id":"196","mutatorName":"EqualityOperator","replacement":"b % 1 === 0","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":36,"line":178},"start":{"column":25,"line":178}}},{"id":"197","mutatorName":"ArithmeticOperator","replacement":"b * 1","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":30,"line":178},"start":{"column":25,"line":178}}},{"id":"198","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":4,"line":180},"start":{"column":39,"line":178}}},{"id":"199","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Can only operate on integers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":51,"line":179},"start":{"column":21,"line":179}}},{"id":"200","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"-0 == 5298","status":"Killed","estimatedNetTime":2,"hitCount":73,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":11,"line":181},"start":{"column":10,"line":181}}},{"id":"201","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (5801/5800)","status":"Timeout","estimatedNetTime":2,"hitCount":58,"static":false,"coveredBy":["16","17","109"],"location":{"end":{"column":4,"line":185},"start":{"column":13,"line":181}}},{"id":"202","mutatorName":"ArithmeticOperator","replacement":"a * b","statusReason":"Hit limit reached (5801/5800)","status":"Timeout","estimatedNetTime":2,"hitCount":58,"static":false,"coveredBy":["16","17","109"],"location":{"end":{"column":14,"line":182},"start":{"column":9,"line":182}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"-5298 == 5298","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":16,"line":186},"start":{"column":11,"line":186}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"-1254 == 1254","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":16,"line":186},"start":{"column":11,"line":186}}},{"id":"205","mutatorName":"EqualityOperator","replacement":"0 <= a","status":"Survived","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":3,"coveredBy":["16","17","109"],"location":{"end":{"column":16,"line":186},"start":{"column":11,"line":186}}},{"id":"206","mutatorName":"EqualityOperator","replacement":"0 >= a","statusReason":"-1254 == 1254","status":"Killed","estimatedNetTime":2,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17","109"],"location":{"end":{"column":16,"line":186},"start":{"column":11,"line":186}}},{"id":"207","mutatorName":"UnaryOperator","replacement":"+a","statusReason":"-5298 == 5298","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":26,"line":186},"start":{"column":24,"line":186}}},{"id":"208","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 0","status":"Killed","estimatedNetTime":1,"hitCount":9,"static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":2,"line":198},"start":{"column":35,"line":196}}},{"id":"209","mutatorName":"ArithmeticOperator","replacement":"Math.abs(num1 * num2) * basic.gcd(num1, num2)","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":9,"static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":55,"line":197},"start":{"column":10,"line":197}}},{"id":"210","mutatorName":"ArithmeticOperator","replacement":"num1 / num2","statusReason":"Infinity == 0","status":"Killed","estimatedNetTime":1,"hitCount":9,"static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":30,"line":197},"start":{"column":19,"line":197}}},{"id":"245","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2330,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":2,"line":271},"start":{"column":28,"line":254}}},{"id":"246","mutatorName":"BooleanLiteral","replacement":"Array.isArray(arr)","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2330,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":26,"line":255},"start":{"column":7,"line":255}}},{"id":"247","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":2330,"hitCount":5,"static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":26,"line":255},"start":{"column":7,"line":255}}},{"id":"248","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2330,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":26,"line":255},"start":{"column":7,"line":255}}},{"id":"249","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":4,"line":257},"start":{"column":28,"line":255}}},{"id":"250","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":50,"line":256},"start":{"column":21,"line":256}}},{"id":"251","mutatorName":"UnaryOperator","replacement":"+Infinity","statusReason":"Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":22,"line":258},"start":{"column":13,"line":258}}},{"id":"252","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":44,"line":260},"start":{"column":37,"line":260}}},{"id":"253","mutatorName":"EqualityOperator","replacement":"i <= len","statusReason":"NaN == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":44,"line":260},"start":{"column":37,"line":260}}},{"id":"254","mutatorName":"EqualityOperator","replacement":"i >= len","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":44,"line":260},"start":{"column":37,"line":260}}},{"id":"255","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"NaN == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":49,"line":260},"start":{"column":46,"line":260}}},{"id":"256","mutatorName":"BlockStatement","replacement":"{}","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":4,"line":269},"start":{"column":51,"line":260}}},{"id":"257","mutatorName":"UnaryOperator","replacement":"-arr[i]","statusReason":"-1 == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":18,"line":261},"start":{"column":11,"line":261}}},{"id":"258","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"-42 == -1","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":18,"line":262},"start":{"column":9,"line":262}}},{"id":"259","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":18,"line":262},"start":{"column":9,"line":262}}},{"id":"261","mutatorName":"EqualityOperator","replacement":"max >= val","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":18,"line":262},"start":{"column":9,"line":262}}},{"id":"262","mutatorName":"BlockStatement","replacement":"{}","statusReason":"-Infinity == 42","status":"Killed","estimatedNetTime":2330,"hitCount":17,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":6,"line":264},"start":{"column":20,"line":262}}},{"id":"263","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NaN == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":266},"start":{"column":9,"line":266}}},{"id":"265","mutatorName":"EqualityOperator","replacement":"val === val","statusReason":"NaN == 42","status":"Killed","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":20,"line":266},"start":{"column":9,"line":266}}},{"id":"267","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2322,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20","21"],"location":{"end":{"column":2,"line":296},"start":{"column":28,"line":279}}},{"id":"268","mutatorName":"BooleanLiteral","replacement":"Array.isArray(arr)","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2322,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20","21"],"location":{"end":{"column":26,"line":280},"start":{"column":7,"line":280}}},{"id":"269","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Input must be of type Array","status":"Killed","estimatedNetTime":2322,"hitCount":5,"static":false,"testsCompleted":2,"killedBy":["21"],"coveredBy":["20","21"],"location":{"end":{"column":26,"line":280},"start":{"column":7,"line":280}}},{"id":"270","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":2322,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20","21"],"location":{"end":{"column":26,"line":280},"start":{"column":7,"line":280}}},{"id":"271","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":4,"line":282},"start":{"column":28,"line":280}}},{"id":"272","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Input must be of type Array/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":50,"line":281},"start":{"column":21,"line":281}}},{"id":"273","mutatorName":"UnaryOperator","replacement":"-Infinity","statusReason":"-Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":22,"line":283},"start":{"column":13,"line":283}}},{"id":"274","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":44,"line":285},"start":{"column":37,"line":285}}},{"id":"275","mutatorName":"EqualityOperator","replacement":"i <= len","statusReason":"NaN == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":44,"line":285},"start":{"column":37,"line":285}}},{"id":"264","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":20,"line":266},"start":{"column":9,"line":266}}},{"id":"276","mutatorName":"EqualityOperator","replacement":"i >= len","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000016,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":44,"line":285},"start":{"column":37,"line":285}}},{"id":"277","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"NaN == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":49,"line":285},"start":{"column":46,"line":285}}},{"id":"278","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":4,"line":294},"start":{"column":51,"line":285}}},{"id":"260","mutatorName":"EqualityOperator","replacement":"max <= val","status":"Survived","estimatedNetTime":2330,"hitCount":10000012,"static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":18,"line":262},"start":{"column":9,"line":262}}},{"id":"279","mutatorName":"UnaryOperator","replacement":"-arr[i]","statusReason":"-42 == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":18,"line":286},"start":{"column":11,"line":286}}},{"id":"280","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"42 == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":18,"line":287},"start":{"column":9,"line":287}}},{"id":"281","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":18,"line":287},"start":{"column":9,"line":287}}},{"id":"283","mutatorName":"EqualityOperator","replacement":"val >= min","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":18,"line":287},"start":{"column":9,"line":287}}},{"id":"284","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Infinity == 1","status":"Killed","estimatedNetTime":2322,"hitCount":26,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":6,"line":289},"start":{"column":20,"line":287}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NaN == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":20,"line":291},"start":{"column":9,"line":291}}},{"id":"287","mutatorName":"EqualityOperator","replacement":"val === val","statusReason":"NaN == 1","status":"Killed","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":20,"line":291},"start":{"column":9,"line":291}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":2,"line":331},"start":{"column":44,"line":306}}},{"id":"290","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":28,"line":310},"start":{"column":7,"line":310}}},{"id":"291","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["22","135"],"location":{"end":{"column":28,"line":310},"start":{"column":7,"line":310}}},{"id":"292","mutatorName":"EqualityOperator","replacement":"arguments.length < 1","status":"Survived","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["22","135"],"location":{"end":{"column":28,"line":310},"start":{"column":7,"line":310}}},{"id":"293","mutatorName":"EqualityOperator","replacement":"arguments.length > 1","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":28,"line":310},"start":{"column":7,"line":310}}},{"id":"298","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1.5,\n  2,\n  2.5,\n  3,\n  3.5,\n  4,\n  4.5,\n  5\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":315},"start":{"column":10,"line":315}}},{"id":"299","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Invalid array length","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":315},"start":{"column":10,"line":315}}},{"id":"300","mutatorName":"LogicalOperator","replacement":"step && 1","statusReason":"Invalid array length","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":315},"start":{"column":10,"line":315}}},{"id":"301","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":317},"start":{"column":7,"line":317}}},{"id":"286","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":20,"line":291},"start":{"column":9,"line":291}}},{"id":"302","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  10,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":317},"start":{"column":7,"line":317}}},{"id":"303","mutatorName":"EqualityOperator","replacement":"stop <= start","status":"Survived","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["22","135"],"location":{"end":{"column":19,"line":317},"start":{"column":7,"line":317}}},{"id":"304","mutatorName":"EqualityOperator","replacement":"stop >= start","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":19,"line":317},"start":{"column":7,"line":317}}},{"id":"282","mutatorName":"EqualityOperator","replacement":"val <= min","status":"Survived","estimatedNetTime":2322,"hitCount":10000012,"static":false,"testsCompleted":1,"coveredBy":["21"],"location":{"end":{"column":18,"line":287},"start":{"column":9,"line":287}}},{"id":"305","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  10,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":4,"line":319},"start":{"column":21,"line":317}}},{"id":"306","mutatorName":"ArithmeticOperator","replacement":"0 + Math.abs(step)","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  10,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":30,"line":318},"start":{"column":12,"line":318}}},{"id":"307","mutatorName":"ArithmeticOperator","replacement":"Math.ceil((stop - start) / step) - 1","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":54,"line":321},"start":{"column":18,"line":321}}},{"id":"308","mutatorName":"ArithmeticOperator","replacement":"(stop - start) * step","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  1.5,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1.5,\n  2,\n  2.5,\n  3,\n  3.5,\n  4,\n  4.5,\n  5\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":49,"line":321},"start":{"column":28,"line":321}}},{"id":"309","mutatorName":"ArithmeticOperator","replacement":"stop + start","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":41,"line":321},"start":{"column":29,"line":321}}},{"id":"310","mutatorName":"ArrayDeclaration","replacement":"new Array()","status":"Survived","estimatedNetTime":1,"hitCount":6,"static":false,"testsCompleted":2,"coveredBy":["22","135"],"location":{"end":{"column":25,"line":323},"start":{"column":11,"line":323}}},{"id":"311","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  <10 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":66,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":17,"line":325},"start":{"column":10,"line":325}}},{"id":"312","mutatorName":"EqualityOperator","replacement":"i <= len","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":66,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":17,"line":325},"start":{"column":10,"line":325}}},{"id":"313","mutatorName":"EqualityOperator","replacement":"i >= len","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  <10 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]","status":"Killed","estimatedNetTime":1,"hitCount":66,"static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22","135"],"location":{"end":{"column":17,"line":325},"start":{"column":10,"line":325}}},{"id":"314","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (6001/6000)","status":"Timeout","estimatedNetTime":1,"hitCount":60,"static":false,"coveredBy":["22","135"],"location":{"end":{"column":4,"line":328},"start":{"column":19,"line":325}}},{"id":"315","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"Hit limit reached (6001/6000)","status":"Timeout","estimatedNetTime":1,"hitCount":60,"static":false,"coveredBy":["22","135"],"location":{"end":{"column":14,"line":326},"start":{"column":11,"line":326}}},{"id":"316","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == false","status":"Killed","estimatedNetTime":2,"hitCount":84,"static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","105","110","111"],"location":{"end":{"column":2,"line":341},"start":{"column":28,"line":339}}},{"id":"317","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","estimatedNetTime":2,"hitCount":84,"static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","105","110","111"],"location":{"end":{"column":21,"line":340},"start":{"column":10,"line":340}}},{"id":"318","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","estimatedNetTime":2,"hitCount":84,"static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","105","110","111"],"location":{"end":{"column":21,"line":340},"start":{"column":10,"line":340}}},{"id":"319","mutatorName":"EqualityOperator","replacement":"n % 1 !== 0","statusReason":"true == false","status":"Killed","estimatedNetTime":2,"hitCount":84,"static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","105","110","111"],"location":{"end":{"column":21,"line":340},"start":{"column":10,"line":340}}},{"id":"320","mutatorName":"ArithmeticOperator","replacement":"n * 1","statusReason":"false == true","status":"Killed","estimatedNetTime":2,"hitCount":84,"static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","105","110","111"],"location":{"end":{"column":15,"line":340},"start":{"column":10,"line":340}}},{"id":"321","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  2,\n  0\n]","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":2,"line":354},"start":{"column":32,"line":350}}},{"id":"322","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"b cannot be zero. Undefined.","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":13,"line":351},"start":{"column":7,"line":351}}},{"id":"323","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":4,"coveredBy":["24","105","110","111"],"location":{"end":{"column":13,"line":351},"start":{"column":7,"line":351}}},{"id":"324","mutatorName":"EqualityOperator","replacement":"b < 0","status":"Survived","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":4,"coveredBy":["24","105","110","111"],"location":{"end":{"column":13,"line":351},"start":{"column":7,"line":351}}},{"id":"325","mutatorName":"EqualityOperator","replacement":"b > 0","statusReason":"b cannot be zero. Undefined.","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":13,"line":351},"start":{"column":7,"line":351}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"A or B are not integers.","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":41,"line":352},"start":{"column":7,"line":352}}},{"id":"328","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":4,"coveredBy":["24","105","110","111"],"location":{"end":{"column":41,"line":352},"start":{"column":7,"line":352}}},{"id":"329","mutatorName":"LogicalOperator","replacement":"!basic.isInt(a) && !basic.isInt(b)","status":"Survived","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":4,"coveredBy":["24","105","110","111"],"location":{"end":{"column":41,"line":352},"start":{"column":7,"line":352}}},{"id":"330","mutatorName":"BooleanLiteral","replacement":"basic.isInt(a)","statusReason":"A or B are not integers.","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":22,"line":352},"start":{"column":7,"line":352}}},{"id":"331","mutatorName":"BooleanLiteral","replacement":"basic.isInt(b)","statusReason":"A or B are not integers.","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":41,"line":352},"start":{"column":26,"line":352}}},{"id":"333","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  0\n]","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":36,"line":353},"start":{"column":10,"line":353}}},{"id":"334","mutatorName":"ArithmeticOperator","replacement":"a * b","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  72,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  0\n]","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":27,"line":353},"start":{"column":22,"line":353}}},{"id":"335","mutatorName":"ArithmeticOperator","replacement":"a * b","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  2,\n  72\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  0\n]","status":"Killed","estimatedNetTime":2,"hitCount":32,"static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","105","110","111"],"location":{"end":{"column":35,"line":353},"start":{"column":30,"line":353}}},{"id":"337","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":7,"line":368}}},{"id":"336","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":2,"line":389},"start":{"column":37,"line":367}}},{"id":"338","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":7,"line":368}}},{"id":"339","mutatorName":"LogicalOperator","replacement":"(typeof a !== 'number' || typeof b !== 'number') && typeof m !== 'number'","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":7,"line":368}}},{"id":"340","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":7,"line":368}}},{"id":"341","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":7,"line":368}}},{"id":"342","mutatorName":"LogicalOperator","replacement":"typeof a !== 'number' && typeof b !== 'number'","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":7,"line":368}}},{"id":"343","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":30,"line":368},"start":{"column":7,"line":368}}},{"id":"344","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":30,"line":368},"start":{"column":7,"line":368}}},{"id":"345","mutatorName":"EqualityOperator","replacement":"typeof a === 'number'","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":30,"line":368},"start":{"column":7,"line":368}}},{"id":"346","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":30,"line":368},"start":{"column":22,"line":368}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":34,"line":368}}},{"id":"349","mutatorName":"EqualityOperator","replacement":"typeof b === 'number'","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":34,"line":368}}},{"id":"348","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":34,"line":368}}},{"id":"350","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":57,"line":368},"start":{"column":49,"line":368}}},{"id":"351","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":61,"line":368}}},{"id":"352","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":61,"line":368}}},{"id":"353","mutatorName":"EqualityOperator","replacement":"typeof m === 'number'","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":61,"line":368}}},{"id":"354","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Inputs must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":84,"line":368},"start":{"column":76,"line":368}}},{"id":"356","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NaN == 16","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":370},"start":{"column":7,"line":370}}},{"id":"357","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":370},"start":{"column":7,"line":370}}},{"id":"358","mutatorName":"EqualityOperator","replacement":"b <= -1","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":370},"start":{"column":7,"line":370}}},{"id":"359","mutatorName":"EqualityOperator","replacement":"b >= -1","statusReason":"NaN == 16","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":370},"start":{"column":7,"line":370}}},{"id":"360","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"2.449489742783178 == 6","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":370},"start":{"column":11,"line":370}}},{"id":"362","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":14,"line":371},"start":{"column":7,"line":371}}},{"id":"363","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":14,"line":371},"start":{"column":7,"line":371}}},{"id":"364","mutatorName":"EqualityOperator","replacement":"b !== 0","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":14,"line":371},"start":{"column":7,"line":371}}},{"id":"366","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"1 == 6","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":372},"start":{"column":7,"line":372}}},{"id":"367","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":372},"start":{"column":7,"line":372}}},{"id":"368","mutatorName":"EqualityOperator","replacement":"b > 1","status":"Survived","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":4,"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":372},"start":{"column":7,"line":372}}},{"id":"369","mutatorName":"EqualityOperator","replacement":"b < 1","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":251,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":13,"line":372},"start":{"column":7,"line":372}}},{"id":"370","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":249,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":4,"line":383},"start":{"column":15,"line":372}}},{"id":"371","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":1793,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":17,"line":374},"start":{"column":12,"line":374}}},{"id":"372","mutatorName":"EqualityOperator","replacement":"b >= 0","statusReason":"Hit limit reached (179301/179300)","status":"Timeout","estimatedNetTime":1,"hitCount":1793,"static":false,"coveredBy":["29","105","110","111"],"location":{"end":{"column":17,"line":374},"start":{"column":12,"line":374}}},{"id":"373","mutatorName":"EqualityOperator","replacement":"b <= 0","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":1793,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":17,"line":374},"start":{"column":12,"line":374}}},{"id":"375","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"2 == 1","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":24,"line":375},"start":{"column":11,"line":375}}},{"id":"374","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (154401/154400)","status":"Timeout","estimatedNetTime":1,"hitCount":1544,"static":false,"coveredBy":["29","105","110","111"],"location":{"end":{"column":6,"line":381},"start":{"column":19,"line":374}}},{"id":"376","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":24,"line":375},"start":{"column":11,"line":375}}},{"id":"377","mutatorName":"EqualityOperator","replacement":"b % 2 !== 1","statusReason":"2 == 1","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":24,"line":375},"start":{"column":11,"line":375}}},{"id":"378","mutatorName":"ArithmeticOperator","replacement":"b * 2","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":17,"line":375},"start":{"column":12,"line":375}}},{"id":"379","mutatorName":"BlockStatement","replacement":"{}","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":871,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":8,"line":377},"start":{"column":26,"line":375}}},{"id":"380","mutatorName":"ArithmeticOperator","replacement":"result * a * m","statusReason":"9 == 1","status":"Killed","estimatedNetTime":1,"hitCount":871,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":34,"line":376},"start":{"column":18,"line":376}}},{"id":"381","mutatorName":"ArithmeticOperator","replacement":"result / a","statusReason":"5.820766091346741e-11 == 16","status":"Killed","estimatedNetTime":1,"hitCount":871,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":29,"line":376},"start":{"column":19,"line":376}}},{"id":"382","mutatorName":"ArithmeticOperator","replacement":"a * a * m","statusReason":"0 == 1","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":22,"line":379},"start":{"column":11,"line":379}}},{"id":"383","mutatorName":"ArithmeticOperator","replacement":"a / a","statusReason":"1 == 16","status":"Killed","estimatedNetTime":1,"hitCount":1544,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","105","110","111"],"location":{"end":{"column":17,"line":379},"start":{"column":12,"line":379}}},{"id":"384","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"No modular inverse exists","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":15,"line":385},"start":{"column":7,"line":385}}},{"id":"385","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Hit limit reached (201/200)","status":"Timeout","estimatedNetTime":0,"hitCount":2,"static":false,"coveredBy":["29"],"location":{"end":{"column":15,"line":385},"start":{"column":7,"line":385}}},{"id":"386","mutatorName":"EqualityOperator","replacement":"b !== -1","statusReason":"Hit limit reached (201/200)","status":"Timeout","estimatedNetTime":0,"hitCount":2,"static":false,"coveredBy":["29"],"location":{"end":{"column":15,"line":385},"start":{"column":7,"line":385}}},{"id":"387","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"Hit limit reached (201/200)","status":"Timeout","estimatedNetTime":0,"hitCount":2,"static":false,"coveredBy":["29"],"location":{"end":{"column":15,"line":385},"start":{"column":13,"line":385}}},{"id":"388","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["29"],"location":{"end":{"column":12,"line":386},"start":{"column":7,"line":386}}},{"id":"389","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"undefined == 6","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":12,"line":386},"start":{"column":7,"line":386}}},{"id":"390","mutatorName":"EqualityOperator","replacement":"b <= 1","status":"Survived","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["29"],"location":{"end":{"column":12,"line":386},"start":{"column":7,"line":386}}},{"id":"391","mutatorName":"EqualityOperator","replacement":"b >= 1","statusReason":"undefined == 6","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":12,"line":386},"start":{"column":7,"line":386}}},{"id":"392","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 6","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":4,"line":388},"start":{"column":14,"line":386}}},{"id":"393","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"Hit limit reached (101/100)","status":"Timeout","estimatedNetTime":0,"hitCount":1,"static":false,"coveredBy":["29"],"location":{"end":{"column":44,"line":387},"start":{"column":42,"line":387}}},{"id":"394","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":2,"line":436},"start":{"column":30,"line":398}}},{"id":"395","mutatorName":"UnaryOperator","replacement":"-a","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":9,"line":399},"start":{"column":7,"line":399}}},{"id":"396","mutatorName":"UnaryOperator","replacement":"-b","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  0,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  0,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":9,"line":400},"start":{"column":7,"line":400}}},{"id":"397","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":7,"line":402}}},{"id":"398","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":7,"line":402}}},{"id":"399","mutatorName":"LogicalOperator","replacement":"a !== a && b !== b","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":7,"line":402}}},{"id":"400","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":14,"line":402},"start":{"column":7,"line":402}}},{"id":"401","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":14,"line":402},"start":{"column":7,"line":402}}},{"id":"402","mutatorName":"EqualityOperator","replacement":"a === a","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":14,"line":402},"start":{"column":7,"line":402}}},{"id":"404","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":18,"line":402}}},{"id":"403","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":18,"line":402}}},{"id":"405","mutatorName":"EqualityOperator","replacement":"b === b","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":25,"line":402},"start":{"column":18,"line":402}}},{"id":"406","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":4,"line":404},"start":{"column":27,"line":402}}},{"id":"407","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"'' == 'NaN,NaN,NaN'","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":27,"line":403},"start":{"column":12,"line":403}}},{"id":"408","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":7,"line":406}}},{"id":"409","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":7,"line":406}}},{"id":"410","mutatorName":"LogicalOperator","replacement":"(a === Infinity || a === -Infinity || b === Infinity) && b === -Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":7,"line":406}}},{"id":"411","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":7,"line":406}}},{"id":"412","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":7,"line":406}}},{"id":"413","mutatorName":"LogicalOperator","replacement":"(a === Infinity || a === -Infinity) && b === Infinity","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":7,"line":406}}},{"id":"414","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":7,"line":406}}},{"id":"415","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":7,"line":406}}},{"id":"416","mutatorName":"LogicalOperator","replacement":"a === Infinity && a === -Infinity","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":7,"line":406}}},{"id":"417","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":21,"line":406},"start":{"column":7,"line":406}}},{"id":"418","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":21,"line":406},"start":{"column":7,"line":406}}},{"id":"419","mutatorName":"EqualityOperator","replacement":"a !== Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":21,"line":406},"start":{"column":7,"line":406}}},{"id":"420","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":25,"line":406}}},{"id":"421","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":25,"line":406}}},{"id":"422","mutatorName":"EqualityOperator","replacement":"a !== -Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":25,"line":406}}},{"id":"423","mutatorName":"UnaryOperator","replacement":"+Infinity","status":"Survived","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":40,"line":406},"start":{"column":31,"line":406}}},{"id":"424","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":44,"line":406}}},{"id":"425","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":44,"line":406}}},{"id":"426","mutatorName":"EqualityOperator","replacement":"b !== Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":14,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":58,"line":406},"start":{"column":44,"line":406}}},{"id":"427","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":62,"line":406}}},{"id":"428","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":62,"line":406}}},{"id":"429","mutatorName":"EqualityOperator","replacement":"b !== -Infinity","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":62,"line":406}}},{"id":"430","mutatorName":"UnaryOperator","replacement":"+Infinity","status":"Survived","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":5,"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":77,"line":406},"start":{"column":68,"line":406}}},{"id":"431","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":4,"line":408},"start":{"column":79,"line":406}}},{"id":"432","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  Infinity,\n  Infinity,\n  Infinity\n]","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":42,"line":407},"start":{"column":12,"line":407}}},{"id":"433","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":37,"line":410},"start":{"column":7,"line":410}}},{"id":"434","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":37,"line":410},"start":{"column":7,"line":410}}},{"id":"435","mutatorName":"LogicalOperator","replacement":"a % 1 !== 0 && b % 1 !== 0","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":37,"line":410},"start":{"column":7,"line":410}}},{"id":"436","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":19,"line":410},"start":{"column":8,"line":410}}},{"id":"437","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":19,"line":410},"start":{"column":8,"line":410}}},{"id":"438","mutatorName":"EqualityOperator","replacement":"a % 1 === 0","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":19,"line":410},"start":{"column":8,"line":410}}},{"id":"439","mutatorName":"ArithmeticOperator","replacement":"a * 1","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":13,"static":false,"testsCompleted":2,"killedBy":["26"],"coveredBy":["25","26","27","28","29"],"location":{"end":{"column":13,"line":410},"start":{"column":8,"line":410}}},{"id":"440","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":36,"line":410},"start":{"column":25,"line":410}}},{"id":"441","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":4,"coveredBy":["26","27","28","29"],"location":{"end":{"column":36,"line":410},"start":{"column":25,"line":410}}},{"id":"442","mutatorName":"EqualityOperator","replacement":"b % 1 === 0","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":36,"line":410},"start":{"column":25,"line":410}}},{"id":"443","mutatorName":"ArithmeticOperator","replacement":"b * 1","statusReason":"Can only operate on integers","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":30,"line":410},"start":{"column":25,"line":410}}},{"id":"444","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25"],"location":{"end":{"column":4,"line":412},"start":{"column":39,"line":410}}},{"id":"445","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Can only operate on integers/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25"],"location":{"end":{"column":51,"line":411},"start":{"column":21,"line":411}}},{"id":"446","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":413},"start":{"column":16,"line":413}}},{"id":"447","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  -0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  -1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":413},"start":{"column":16,"line":413}}},{"id":"448","mutatorName":"EqualityOperator","replacement":"a <= 0","status":"Survived","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":4,"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":413},"start":{"column":16,"line":413}}},{"id":"449","mutatorName":"EqualityOperator","replacement":"a >= 0","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":413},"start":{"column":16,"line":413}}},{"id":"450","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  -0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  -1,\n  0\n]","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":27,"line":413},"start":{"column":25,"line":413}}},{"id":"451","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  0,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  0,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":19,"line":414},"start":{"column":14,"line":414}}},{"id":"452","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":4,"coveredBy":["26","27","28","29"],"location":{"end":{"column":19,"line":414},"start":{"column":14,"line":414}}},{"id":"453","mutatorName":"EqualityOperator","replacement":"b <= 0","status":"Survived","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":4,"coveredBy":["26","27","28","29"],"location":{"end":{"column":19,"line":414},"start":{"column":14,"line":414}}},{"id":"454","mutatorName":"EqualityOperator","replacement":"b >= 0","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  0,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  0,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":19,"line":414},"start":{"column":14,"line":414}}},{"id":"455","mutatorName":"UnaryOperator","replacement":"+1","status":"Survived","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["26"],"location":{"end":{"column":25,"line":414},"start":{"column":23,"line":414}}},{"id":"456","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":48,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":17,"line":423},"start":{"column":10,"line":423}}},{"id":"457","mutatorName":"EqualityOperator","replacement":"a === 0","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":48,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":17,"line":423},"start":{"column":10,"line":423}}},{"id":"458","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (3601/3600)","status":"Timeout","estimatedNetTime":1,"hitCount":36,"static":false,"coveredBy":["26","27","28","29"],"location":{"end":{"column":4,"line":434},"start":{"column":19,"line":423}}},{"id":"459","mutatorName":"ArithmeticOperator","replacement":"b * a","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  10,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":36,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":25,"line":424},"start":{"column":20,"line":424}}},{"id":"460","mutatorName":"ArithmeticOperator","replacement":"b * a","statusReason":"Hit limit reached (3601/3600)","status":"Timeout","estimatedNetTime":1,"hitCount":36,"static":false,"coveredBy":["26","27","28","29"],"location":{"end":{"column":14,"line":425},"start":{"column":9,"line":425}}},{"id":"461","mutatorName":"ArithmeticOperator","replacement":"x + oldX * q","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  -2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":36,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":426},"start":{"column":9,"line":426}}},{"id":"462","mutatorName":"ArithmeticOperator","replacement":"oldX / q","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  1,\n  0.5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":36,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":426},"start":{"column":13,"line":426}}},{"id":"463","mutatorName":"ArithmeticOperator","replacement":"y + oldY * q","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5,\n  -3\n]","status":"Killed","estimatedNetTime":1,"hitCount":36,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":427},"start":{"column":9,"line":427}}},{"id":"464","mutatorName":"ArithmeticOperator","replacement":"oldY / q","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  -3,\n  5\n]","status":"Killed","estimatedNetTime":1,"hitCount":36,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":21,"line":427},"start":{"column":13,"line":427}}},{"id":"465","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":35,"line":435},"start":{"column":10,"line":435}}},{"id":"466","mutatorName":"ArithmeticOperator","replacement":"signX / x","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  Infinity,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  0,\n  1\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":23,"line":435},"start":{"column":14,"line":435}}},{"id":"467","mutatorName":"ArithmeticOperator","replacement":"signY / y","statusReason":"Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0\n]","status":"Killed","estimatedNetTime":1,"hitCount":12,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27","28","29"],"location":{"end":{"column":34,"line":435},"start":{"column":25,"line":435}}},{"id":"468","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27","28","29"],"location":{"end":{"column":2,"line":448},"start":{"column":36,"line":444}}},{"id":"469","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"No modular inverse exists","status":"Killed","estimatedNetTime":1,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27","28","29"],"location":{"end":{"column":17,"line":446},"start":{"column":7,"line":446}}},{"id":"470","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":3,"static":false,"testsCompleted":2,"killedBy":["28"],"coveredBy":["27","28","29"],"location":{"end":{"column":17,"line":446},"start":{"column":7,"line":446}}},{"id":"471","mutatorName":"EqualityOperator","replacement":"r[0] === 1","statusReason":"No modular inverse exists","status":"Killed","estimatedNetTime":1,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27","28","29"],"location":{"end":{"column":17,"line":446},"start":{"column":7,"line":446}}},{"id":"472","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /No modular inverse exists/. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":62,"line":446},"start":{"column":35,"line":446}}},{"id":"473","mutatorName":"ArithmeticOperator","replacement":"r[1] * m","statusReason":"5 == 1","status":"Killed","estimatedNetTime":0,"hitCount":2,"static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27","29"],"location":{"end":{"column":18,"line":447},"start":{"column":10,"line":447}}},{"id":"474","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == true","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":2,"line":461},"start":{"column":56,"line":458}}},{"id":"475","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":7,"line":459}}},{"id":"476","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":7,"line":459}}},{"id":"477","mutatorName":"LogicalOperator","replacement":"(typeof first !== 'number' || typeof second !== 'number') && typeof epsilon !== 'number'","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":7,"line":459}}},{"id":"478","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":7,"line":459}}},{"id":"479","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":7,"line":459}}},{"id":"480","mutatorName":"LogicalOperator","replacement":"typeof first !== 'number' && typeof second !== 'number'","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":7,"line":459}}},{"id":"481","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":34,"line":459},"start":{"column":7,"line":459}}},{"id":"482","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":34,"line":459},"start":{"column":7,"line":459}}},{"id":"483","mutatorName":"EqualityOperator","replacement":"typeof first === 'number'","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":34,"line":459},"start":{"column":7,"line":459}}},{"id":"484","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":55,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":34,"line":459},"start":{"column":26,"line":459}}},{"id":"485","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":54,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":38,"line":459}}},{"id":"487","mutatorName":"EqualityOperator","replacement":"typeof second === 'number'","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":54,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":38,"line":459}}},{"id":"486","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":54,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":38,"line":459}}},{"id":"488","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":54,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":66,"line":459},"start":{"column":58,"line":459}}},{"id":"491","mutatorName":"EqualityOperator","replacement":"typeof epsilon === 'number'","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":53,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":70,"line":459}}},{"id":"489","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":53,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":70,"line":459}}},{"id":"490","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Missing expected exception.","status":"Killed","estimatedNetTime":1,"hitCount":53,"static":false,"testsCompleted":2,"killedBy":["31"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":70,"line":459}}},{"id":"492","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"First and Second must be numbers.","status":"Killed","estimatedNetTime":1,"hitCount":53,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","31","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":99,"line":459},"start":{"column":91,"line":459}}},{"id":"493","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /First and Second must be numbers./. Input:\n\n'Error'\n","status":"Killed","estimatedNetTime":0,"hitCount":3,"static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":152,"line":459},"start":{"column":117,"line":459}}},{"id":"494","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":10,"line":460}}},{"id":"495","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":10,"line":460}}},{"id":"496","mutatorName":"LogicalOperator","replacement":"first - second < epsilon || first - second > -epsilon","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":10,"line":460}}},{"id":"497","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":3,"killedBy":["32"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":36,"line":460},"start":{"column":10,"line":460}}},{"id":"499","mutatorName":"EqualityOperator","replacement":"first - second <= epsilon","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":3,"killedBy":["32"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":36,"line":460},"start":{"column":10,"line":460}}},{"id":"498","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":36,"line":460},"start":{"column":10,"line":460}}},{"id":"500","mutatorName":"EqualityOperator","replacement":"first - second >= epsilon","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":36,"line":460},"start":{"column":10,"line":460}}},{"id":"501","mutatorName":"ArithmeticOperator","replacement":"first + second","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":52,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":25,"line":460},"start":{"column":11,"line":460}}},{"id":"502","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":40,"line":460}}},{"id":"503","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":40,"line":460}}},{"id":"504","mutatorName":"EqualityOperator","replacement":"first - second >= -epsilon","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":3,"killedBy":["32"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":40,"line":460}}},{"id":"505","mutatorName":"EqualityOperator","replacement":"first - second <= -epsilon","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":40,"line":460}}},{"id":"506","mutatorName":"ArithmeticOperator","replacement":"first + second","statusReason":"true == false","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":55,"line":460},"start":{"column":41,"line":460}}},{"id":"507","mutatorName":"UnaryOperator","replacement":"+epsilon","statusReason":"false == true","status":"Killed","estimatedNetTime":1,"hitCount":51,"static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30","32","46","48","49","50","51","52","53","54"],"location":{"end":{"column":67,"line":460},"start":{"column":59,"line":460}}},{"id":"508","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":2,"line":488},"start":{"column":42,"line":472}}},{"id":"509","mutatorName":"ArithmeticOperator","replacement":"n - k - 1","statusReason":"-0 == 1","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":21,"line":473},"start":{"column":12,"line":473}}},{"id":"510","mutatorName":"ArithmeticOperator","replacement":"n + k","statusReason":"1 == 5040","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":17,"line":473},"start":{"column":12,"line":473}}},{"id":"511","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"n cannot be negative.","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":476},"start":{"column":7,"line":476}}},{"id":"512","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"/k is greater than n/","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":476},"start":{"column":7,"line":476}}},{"id":"513","mutatorName":"EqualityOperator","replacement":"n <= 0","statusReason":"n cannot be negative.","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":476},"start":{"column":7,"line":476}}},{"id":"514","mutatorName":"EqualityOperator","replacement":"n >= 0","statusReason":"n cannot be negative.","status":"Killed","estimatedNetTime":0,"hitCount":5,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":476},"start":{"column":7,"line":476}}},{"id":"515","mutatorName":"BlockStatement","replacement":"{}","statusReason":"/k is greater than n/","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":4,"line":478},"start":{"column":14,"line":476}}},{"id":"516","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"/k is greater than n/","status":"Killed","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":44,"line":477},"start":{"column":21,"line":477}}},{"id":"517","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"k cannot be greater than n.","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":479},"start":{"column":7,"line":479}}},{"id":"518","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":12,"line":479},"start":{"column":7,"line":479}}},{"id":"519","mutatorName":"EqualityOperator","replacement":"k >= n","statusReason":"k cannot be greater than n.","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":479},"start":{"column":7,"line":479}}},{"id":"520","mutatorName":"EqualityOperator","replacement":"k <= n","statusReason":"k cannot be greater than n.","status":"Killed","estimatedNetTime":0,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":12,"line":479},"start":{"column":7,"line":479}}},{"id":"523","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"1 == 5040","status":"Killed","estimatedNetTime":0,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":16,"line":483},"start":{"column":10,"line":483}}},{"id":"524","mutatorName":"EqualityOperator","replacement":"i < n","statusReason":"720 == 5040","status":"Killed","estimatedNetTime":0,"hitCount":15,"static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":16,"line":483},"start":{"column":10,"line":483}}},{"id":"525","mutatorName":"EqualityOperator","replacement":"i > n","statusReason":"Hit limit reached (1501/1500)","status":"Timeout","estimatedNetTime":0,"hitCount":15,"static":false,"coveredBy":["33"],"location":{"end":{"column":16,"line":483},"start":{"column":10,"line":483}}},{"id":"526","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Hit limit reached (1101/1100)","status":"Timeout","estimatedNetTime":0,"hitCount":11,"static":false,"coveredBy":["33"],"location":{"end":{"column":4,"line":485},"start":{"column":18,"line":483}}},{"id":"527","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"Hit limit reached (1101/1100)","status":"Timeout","estimatedNetTime":0,"hitCount":11,"static":false,"coveredBy":["33"],"location":{"end":{"column":13,"line":484},"start":{"column":10,"line":484}}},{"id":"529","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"n cannot be less than or equal to 0.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":13,"line":499},"start":{"column":7,"line":499}}},{"id":"528","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 1","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":2,"line":508},"start":{"column":37,"line":498}}},{"id":"530","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":13,"line":499},"start":{"column":7,"line":499}}},{"id":"531","mutatorName":"EqualityOperator","replacement":"n < 0","status":"Survived","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":13,"line":499},"start":{"column":7,"line":499}}},{"id":"535","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"k cannot be greater than k.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":12,"line":502},"start":{"column":7,"line":502}}},{"id":"532","mutatorName":"EqualityOperator","replacement":"n > 0","statusReason":"n cannot be less than or equal to 0.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":13,"line":499},"start":{"column":7,"line":499}}},{"id":"536","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":12,"line":502},"start":{"column":7,"line":502}}},{"id":"537","mutatorName":"EqualityOperator","replacement":"n <= k","statusReason":"k cannot be greater than k.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":12,"line":502},"start":{"column":7,"line":502}}},{"id":"538","mutatorName":"EqualityOperator","replacement":"n >= k","statusReason":"k cannot be greater than k.","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":12,"line":502},"start":{"column":7,"line":502}}},{"id":"541","mutatorName":"ArithmeticOperator","replacement":"binomial / basic.factorial(k)","statusReason":"0.20833333333333334 == 120","status":"Killed","estimatedNetTime":1,"hitCount":4,"static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":50,"line":506},"start":{"column":21,"line":506}}}],"source":"/**\n * basic.js\n * http://github.com/sjkaliski/numbers.js\n *\n * Copyright 2012 Stephen Kaliski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar basic = exports;\n\n/**\n * Determine the summation of numbers in a given array.\n *\n * @param {Array} collection of numbers.\n * @return {Number} sum of numbers in array.\n */\nbasic.sum = function (arr) {\n  if (Object.prototype.toString.call(arr) === '[object Array]') {\n    var total = 0;\n    for (var i = 0; i < arr.length; i++) {\n      if (typeof (arr[i]) === 'number') {\n        total = total + arr[i];\n      } else {\n        throw new Error('All elements in array must be numbers');\n      }\n    }\n    return total;\n  } else {\n    throw new Error('Input must be of type Array');\n  }\n};\n\n/**\n * Subtracts elements from one another in array.\n *\n * e.g [5,3,1,-1] -> 5 - 3 - 1 - (-1) = 2\n *\n * @param {Array} collection of numbers.\n * @return {Number} difference.\n */\nbasic.subtraction = function (arr) {\n  if (Object.prototype.toString.call(arr) === '[object Array]') {\n    var total = arr[0];\n    if (typeof (total) !== 'number') {\n      throw new Error('All elements in array must be numbers');\n    }\n    for (var i = 1, length = arr.length; i < length; i++) {\n      if (typeof (arr[i]) === 'number') {\n        total -= arr[i];\n      } else {\n        throw new Error('All elements in array must be numbers');\n      }\n    }\n    return total;\n  } else {\n    throw new Error('Input must be of type Array');\n  }\n};\n\n/**\n * Product of all elements in an array.\n *\n * @param {Array} collection of numbers.\n * @return {Number} product.\n */\nbasic.product = function (arr) {\n  if (Object.prototype.toString.call(arr) === '[object Array]') {\n    var total = arr[0];\n    if (typeof (total) !== 'number') {\n      throw new Error('All elements in array must be numbers');\n    }\n    for (var i = 1, length = arr.length; i < length; i++) {\n      if (typeof (arr[i]) === 'number') {\n        total = total * arr[i];\n      } else {\n        throw new Error('All elements in array must be numbers');\n      }\n    }\n    return total;\n  } else {\n    throw new Error('Input must be of type Array');\n  }\n};\n\n/**\n * Return the square of any value.\n *\n * @param {Number} number\n * @return {Number} square of number\n */\nbasic.square = function (num) {\n  if (typeof (num) !== 'number') {\n    throw new Error('Input must be a number.');\n  } else {\n    return num * num;\n  }\n\n};\n\n/**\n * Calculate the binomial coefficient (n choose k)\n *\n * @param {Number} available choices\n * @param {Number} number chosen\n * @return {Number} number of possible choices\n */\nbasic.binomial = function (n, k) {\n\n  var arr = [];\n\n  function _binomial(n, k) {\n    if (typeof (n) !== 'number' && typeof (k) !== 'number') {\n      throw new Error('Input must be a number.');\n    }\n    if (n >= 0 && k === 0) return 1;\n    if (n === 0 && k > 0) return 0;\n    if (arr[n] && arr[n][k] > 0) return arr[n][k];\n    if (!arr[n]) arr[n] = [];\n\n    arr[n][k] = _binomial(n - 1, k - 1) + _binomial(n - 1, k);\n    return arr[n][k];\n  }\n\n  return _binomial(n, k);\n};\n\n/**\n * Factorial for some integer.\n *\n * @param {Number} integer.\n * @return {Number} result.\n */\nbasic.factorial = function (num) {\n  if (typeof (num) !== 'number') throw new Error(\"Input must be a number.\");\n  if (num < 0) throw new Error(\"Input must not be negative.\");\n  var i = 2,\n    o = 1;\n\n  while (i <= num) {\n    o *= i++;\n  }\n\n  return o;\n};\n\n/**\n * Calculate the greastest common divisor amongst two integers.\n *\n * @param {Number} number A.\n * @param {Number} number B.\n * @return {Number} greatest common divisor for integers A, B.\n */\nbasic.gcd = function (a, b) {\n  var c;\n  a = +a;\n  b = +b;\n  // Same as isNaN() but faster\n  if (a !== a || b !== b) {\n    return NaN;\n  }\n  //Same as !isFinite() but faster\n  if (a === Infinity || a === -Infinity || b === Infinity || b === -Infinity) {\n    return Infinity;\n  }\n  // Checks if a or b are decimals\n  if ((a % 1 !== 0) || (b % 1 !== 0)) {\n    throw new Error(\"Can only operate on integers\");\n  }\n  while (b) {\n    c = a % b;\n    a = b;\n    b = c;\n  }\n  return (0 < a) ? a : -a;\n};\n\n/**\n * Calculate the least common multiple amongst two integers.\n *\n * @param {Number} number A.\n * @param {Number} number B.\n * @return {Number} least common multiple for integers A, B.\n */\nbasic.lcm = function (num1, num2) {\n  return Math.abs(num1 * num2) / basic.gcd(num1, num2);\n};\n\n/**\n * Retrieve a specified quantity of elements from an array, at random.\n *\n * @param {Array} set of values to select from.\n * @param {Number} quantity of elements to retrieve.\n * @param {Boolean} allow the same number to be returned twice.\n * @return {Array} random elements.\n */\nbasic.random = function (arr, quant, allowDuplicates) {\n  if (arr.length === 0) {\n    throw new Error('Empty array');\n  } else if (quant > arr.length && !allowDuplicates) {\n    throw new Error('Quantity requested exceeds size of array');\n  }\n\n  if (allowDuplicates === true) {\n    var result = [],\n      i;\n    for (i = 0; i < quant; i++) {\n      result[i] = arr[Math.floor(Math.random() * arr.length)];\n    }\n    return result;\n  } else {\n    return basic.shuffle(arr).slice(0, quant);\n  }\n};\n\n/**\n * Shuffle an array, in place.\n *\n * @param {Array} array to be shuffled.\n * @return {Array} shuffled array.\n */\nbasic.shuffle = function (array) {\n  var m = array.length,\n    t, i;\n\n  while (m) {\n    i = Math.floor(Math.random() * m--);\n\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n};\n\n/**\n * Find maximum value in an array.\n *\n * @param {Array} array to be traversed.\n * @return {Number} maximum value in the array.\n */\nbasic.max = function (arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be of type Array\");\n  }\n  var max = -Infinity,\n    val;\n  for (var i = 0, len = arr.length; i < len; i++) {\n    val = +arr[i];\n    if (max < val) {\n      max = val;\n    }\n    // Math.max() returns NaN if one of the elements is not a number.\n    if (val !== val) {\n      return NaN;\n    }\n  }\n  return max;\n};\n\n/**\n * Find minimum value in an array.\n *\n * @param {Array} array to be traversed.\n * @return {Number} minimum value in the array.\n */\nbasic.min = function (arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be of type Array\");\n  }\n  var min = +Infinity,\n    val;\n  for (var i = 0, len = arr.length; i < len; i++) {\n    val = +arr[i];\n    if (val < min) {\n      min = val;\n    }\n    // Math.min() returns NaN if one of the elements is not a number.\n    if (val !== val) {\n      return NaN;\n    }\n  }\n  return min;\n};\n\n\n/**\n * Create a range of numbers.\n *\n * @param {Number} The start of the range.\n * @param {Number} The end of the range.\n * @return {Array} An array containing numbers within the range.\n */\nbasic.range = function (start, stop, step) {\n  var array, i = 0,\n    len;\n\n  if (arguments.length <= 1) {\n    stop = start || 0;\n    start = 0;\n  }\n\n  step = step || 1;\n\n  if (stop < start) {\n    step = 0 - Math.abs(step);\n  }\n\n  len = Math.max(Math.ceil((stop - start) / step) + 1, 0);\n\n  array = new Array(len);\n\n  while (i < len) {\n    array[i++] = start;\n    start += step;\n  }\n\n  return array;\n};\n\n/**\n * Determine if the number is an integer.\n *\n * @param {Number} the number\n * @return {Boolean} true for int, false for not int.\n */\nbasic.isInt = function (n) {\n  return n % 1 === 0;\n};\n\n/**\n * Calculate the divisor and modulus of two integers.\n *\n * @param {Number} int a.\n * @param {Number} int b.\n * @return {Array} [div, mod].\n */\nbasic.divMod = function (a, b) {\n  if (b <= 0) throw new Error(\"b cannot be zero. Undefined.\");\n  if (!basic.isInt(a) || !basic.isInt(b)) throw new Error(\"A or B are not integers.\");\n  return [Math.floor(a / b), a % b];\n};\n\n/**\n * Calculate:\n * if b >= 1: a^b mod m.\n * if b = -1: modInverse(a, m).\n * if b < 1: finds a modular rth root of a such that b = 1/r.\n *\n * @param {Number} Number a.\n * @param {Number} Number b.\n * @param {Number} Modulo m.\n * @return {Number} see the above documentation for return values.\n */\nbasic.powerMod = function (a, b, m) {\n  if (typeof (a) !== 'number' || typeof (b) !== 'number' || typeof (m) !== 'number') throw new Error(\"Inputs must be numbers.\");\n  // If b < -1 should be a small number, this method should work for now.\n  if (b < -1) return Math.pow(a, b) % m;\n  if (b === 0) return 1 % m;\n  if (b >= 1) {\n    var result = 1;\n    while (b > 0) {\n      if ((b % 2) === 1) {\n        result = (result * a) % m;\n      }\n\n      a = (a * a) % m;\n      b = b >> 1;\n    }\n    return result;\n  }\n\n  if (b === -1) return basic.modInverse(a, m);\n  if (b < 1) {\n    return basic.powerMod(a, Math.pow(b, -1), m);\n  }\n};\n\n/**\n * Calculate the extended Euclid Algorithm or extended GCD.\n *\n * @param {Number} int a.\n * @param {Number} int b.\n * @return {Array} [a, x, y] a is the GCD. x and y are the values such that ax + by = gcd(a, b) .\n */\nbasic.egcd = function (a, b) {\n  a = +a;\n  b = +b;\n  // Same as isNaN() but faster\n  if (a !== a || b !== b) {\n    return [NaN, NaN, NaN];\n  }\n  //Same as !isFinite() but faster\n  if (a === Infinity || a === -Infinity || b === Infinity || b === -Infinity) {\n    return [Infinity, Infinity, Infinity];\n  }\n  // Checks if a or b are decimals\n  if ((a % 1 !== 0) || (b % 1 !== 0)) {\n    throw new Error(\"Can only operate on integers\");\n  }\n  var signX = (a < 0) ? -1 : 1,\n    signY = (b < 0) ? -1 : 1,\n    x = 0,\n    y = 1,\n    oldX = 1,\n    oldY = 0,\n    q, r, m, n;\n  a = Math.abs(a);\n  b = Math.abs(b);\n\n  while (a !== 0) {\n    q = Math.floor(b / a);\n    r = b % a;\n    m = x - oldX * q;\n    n = y - oldY * q;\n    b = a;\n    a = r;\n    x = oldX;\n    y = oldY;\n    oldX = m;\n    oldY = n;\n  }\n  return [b, signX * x, signY * y];\n};\n/**\n * Calculate the modular inverse of a number.\n *\n * @param {Number} Number a.\n * @param {Number} Modulo m.\n * @return {Number} if true, return number, else throw error.\n */\nbasic.modInverse = function (a, m) {\n  var r = basic.egcd(a, m);\n  if (r[0] !== 1) throw new Error('No modular inverse exists');\n  return r[1] % m;\n};\n\n\n/**\n * Determine is two numbers are equal within a given margin of precision.\n *\n * @param {Number} first number.\n * @param {Number} second number.\n * @param {Number} epsilon.\n */\nbasic.numbersEqual = function (first, second, epsilon) {\n  if (typeof (first) !== 'number' || typeof (second) !== 'number' || typeof (epsilon) !== 'number') throw new Error(\"First and Second must be numbers.\");\n  return (first - second) < epsilon && (first - second) > -epsilon;\n};\n\n/**\n * Calculate the falling factorial of a number\n *\n * {@see http://mathworld.wolfram.com/FallingFactorial.html}\n *\n * @param {Number} Base\n * @param {Number} Steps to fall\n * @returns {Number} Result\n */\nbasic.fallingFactorial = function (n, k) {\n  var i = (n - k + 1),\n    r = 1;\n\n  if (n < 0) {\n    throw new Error(\"n cannot be negative.\");\n  }\n  if (k > n) {\n    throw new Error(\"k cannot be greater than n.\");\n  }\n\n  while (i <= n) {\n    r *= i++;\n  }\n\n  return r;\n};\n\n/**\n * Calculate the permutation (n choose k)\n *\n * @param {Number} available choices\n * @param {Number} number chosen\n * @return {Number} number of ordered variations\n */\n\nbasic.permutation = function (n, k) {\n  if (n <= 0) {\n    throw new Error(\"n cannot be less than or equal to 0.\");\n  }\n  if (n < k) {\n    throw new Error(\"k cannot be greater than k.\");\n  }\n  var binomial = basic.binomial(n, k);\n  var permutation = binomial * basic.factorial(k);\n  return permutation;\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"numbers sum should return the sum of items in an array"},{"id":"1","name":"numbers sum should throw an exception when given anything but an array"},{"id":"2","name":"numbers sum should throw an exception when given anything objects other than numbers"},{"id":"3","name":"numbers subtraction should return the difference of items in an array"},{"id":"4","name":"numbers subtraction should throw an exception when given anything but an array"},{"id":"5","name":"numbers subtraction should throw an exception when given anything objects other than numbers"},{"id":"6","name":"numbers subtraction should throw an exception last element is not a number"},{"id":"7","name":"numbers product should return the product of items in an array"},{"id":"8","name":"numbers product should throw an exception when given anything but an array"},{"id":"10","name":"numbers product should throw an exception when given anything objects other than numbers"},{"id":"10","name":"numbers product should throw an exception when given anything objects other than numbers"},{"id":"11","name":"numbers square should return the square of a number"},{"id":"12","name":"numbers square should throw an Error when input is other than a number"},{"id":"13","name":"numbers binomial should return the binomial coefficient (n choose k) of two numbers"},{"id":"14","name":"numbers factorial should return the product of n * (n - 1) * (n - 2) * ... * 1"},{"id":"15","name":"numbers gcd should throw an exception when given a decimal"},{"id":"16","name":"numbers gcd should return the greatest common denominator of two integers"},{"id":"17","name":"numbers lcm should return the least common multiple of two integers"},{"id":"18","name":"numbers basic.max will throw an exception if argument is not an array."},{"id":"19","name":"numbers max should return the biggest number in an array"},{"id":"20","name":"numbers basic.min will throw an exception if argument is not an array."},{"id":"21","name":"numbers min should return the smallest number in an array"},{"id":"22","name":"numbers range should return an appropriate range for the given start, stop, and step parameters"},{"id":"23","name":"numbers isInt checks for an integer"},{"id":"24","name":"numbers divMod should return an array of both the division and modulus values of two integers"},{"id":"25","name":"numbers egcd should throw an exception when given a decimal"},{"id":"26","name":"numbers egcd should return the array [a, x, y] which is the solved linear equation for GCD"},{"id":"27","name":"numbers modInverse will return the modulo m inverse of a"},{"id":"28","name":"numbers modInverse will throw an exception if no modular inverse exists"},{"id":"29","name":"numbers powerMod should return the answer to a^b mod m"},{"id":"30","name":"numbers should be able to check equality of two floating point numbers"},{"id":"31","name":"numbers should be able to check equality of two floating point numbers only take numbers"},{"id":"32","name":"numbers numbersEqual boundaries"},{"id":"33","name":"numbers fallingFactorial should return correct answers"},{"id":"34","name":"numbers permutation should return the permutation coefficient (n permute k) of two numbers"},{"id":"35","name":"numbers pointDiff should return the derivative at a point, provided function"},{"id":"36","name":"numbers riemann should return an estimated definite integral of a function"},{"id":"37","name":"numbers adaptive simpson should return an estimated definite integral of a function"},{"id":"38","name":"numbers limit should return the limit of a function at a given point from left, middle, or right"},{"id":"39","name":"numbers Stirling approximation gamma should return correct values"},{"id":"40","name":"numbers Lanczos approximation gamma should return correct values"},{"id":"41","name":"numbers add should return the sum of two complex numbers"},{"id":"42","name":"numbers subtract should return the difference of two complex numbers"},{"id":"43","name":"numbers multiply should return the product of two complex numbers"},{"id":"44","name":"numbers divide should return the product of two complex numbers"},{"id":"45","name":"numbers magnitude should return magnitude"},{"id":"46","name":"numbers phase should return phase"},{"id":"47","name":"numbers magnitude should return complex conjugate"},{"id":"48","name":"numbers should be able to get the power of a complex number"},{"id":"49","name":"numbers should be able to raise a complex number to a given complex power"},{"id":"50","name":"numbers should be able to get all the roots of a complex number"},{"id":"51","name":"numbers should be able to get the sine of a complex number"},{"id":"52","name":"numbers should be able to get the cosine of a complex number"},{"id":"53","name":"numbers should be able to get the tangent of a complex number"},{"id":"54","name":"numbers should be able to check for equality of two complex numbers"},{"id":"55","name":"numbers segment should return a sample of the input array"},{"id":"56","name":"numbers fft should return fourier transform of input array"},{"id":"57","name":"numbers Should generate the nth fibonacci number"},{"id":"58","name":"numbers collatz should populate the given array with a collatz sequence"},{"id":"59","name":"numbers should create a deep copy of a matrix"},{"id":"60","name":"numbers should be able to tell if a matrix is square"},{"id":"61","name":"numbers should return sum of two matrices"},{"id":"62","name":"numbers should return sum of two vectors"},{"id":"63","name":"numbers should return difference of two vectors"},{"id":"64","name":"numbers should returned scaled matrix"},{"id":"65","name":"numbers should return transposed matrix"},{"id":"66","name":"numbers should return identity matrix of dimension n"},{"id":"67","name":"numbers should return dot product of two vectors"},{"id":"68","name":"numbers should return product of two matrices"},{"id":"69","name":"numbers should return product of matrix and a vector"},{"id":"70","name":"numbers should return determinant of matrix"},{"id":"71","name":"numbers should throw an error for calculating the determinant of a non-square matrix"},{"id":"72","name":"numbers should throw an error if trying to get LU decomposition of non-square matrix"},{"id":"73","name":"numbers should return the LU decomposition of a matrix"},{"id":"74","name":"numbers should return a new vector that has been rotated by the transformation matrix"},{"id":"75","name":"numbers should throw an error if a vector larger than two is given for rotation"},{"id":"76","name":"numbers should return a new vector that has been scaled by the transformation matrix"},{"id":"77","name":"numbers should throw an error if a vector larger than two is given for scaling"},{"id":"78","name":"numbers should return a new vector that has been sheared in the x direction by the transformation matrix"},{"id":"79","name":"numbers should return a new vector that has been sheared in the y direction by the transformation matrix"},{"id":"80","name":"numbers should throw an error if a vector larger than two is given for shearing"},{"id":"81","name":"numbers should return a new vector that has been transformed by the affine transformation matrix"},{"id":"82","name":"numbers should throw an error if a vector larger than two is given for the affine transform"},{"id":"83","name":"numbers should return a new matrix that has a scaled row for the rowScale function"},{"id":"84","name":"numbers should return a new matrix that has rows changed with the rowSwitch function"},{"id":"85","name":"numbers should return a new matrix that has a multiple of one row added to another using the rowAddMultiple function"},{"id":"87","name":"numbers should row reduce the given matrix for a given epsilon"},{"id":"87","name":"numbers should row reduce the given matrix for a given epsilon"},{"id":"88","name":"numbers should reorder columns"},{"id":"89","name":"numbers should reorder rows"},{"id":"90","name":"numbers should reverse columns and rows"},{"id":"91","name":"numbers should produce a matrix of zeros"},{"id":"92","name":"numbers should get a column"},{"id":"93","name":"numbers should create a zigzag matrix"},{"id":"94","name":"numbers should calculate a vector norm"},{"id":"95","name":"numbers should calculate a matrix norm"},{"id":"96","name":"numbers should test for upper bandwidth"},{"id":"97","name":"numbers should test for lower bandwidth"},{"id":"98","name":"numbers should test for weak row diagonal dominance"},{"id":"99","name":"numbers should test for strict row diagonal dominance"},{"id":"100","name":"numbers should test for weak column diagonal dominance"},{"id":"101","name":"numbers should test for strict column diagonal dominance"},{"id":"102","name":"numbers should test for applying a function to each element of a matrix"},{"id":"103","name":"numbers should test for applying a function to each element of a matrix with addition parameters"},{"id":"104","name":"numbers simple should be able to determine if a number is prime or not"},{"id":"105","name":"numbers millerRabin should be able to determine if a number is prime or not"},{"id":"106","name":"numbers should be able to determine if a number is prime or not"},{"id":"107","name":"numbers factorization should return an empty array for values < 2, infinite or not numeric"},{"id":"108","name":"numbers factorization should return the prime factors for x where 1 < x < infinity"},{"id":"109","name":"numbers coprime should determine if two integers are coprime or not"},{"id":"110","name":"numbers should find what the prime power of n is if it exists"},{"id":"111","name":"numbers should find a perfect power of n is if it exists"},{"id":"112","name":"numbers random.sample should return an array of random numbers in a certain bound"},{"id":"113","name":"numbers random.boxMullerTransform should return an array of two numbers that are random within a normal distribution"},{"id":"114","name":"numbers random.irwinHall should return a number from [0, a] with a normal distribution for probability"},{"id":"115","name":"numbers random.bates should return a number from [0,1] within a bates distribution"},{"id":"116","name":"numbers random.distribution.normal should return a normal distribution of length n"},{"id":"117","name":"numbers random.distribution.logNormal should return a log normal distribution of length n"},{"id":"118","name":"numbers random.distribution.boxMuller should return a n-sample of a normal distribution"},{"id":"119","name":"numbers random.distribution.irwinHall should return a normal distribution of length n within bounds of (m/2 - sub, m/2)"},{"id":"120","name":"numbers random.distribution.irwinHallNormal should return a n-sample of a normal distribution with a bound of (-6, 6)"},{"id":"121","name":"numbers random.distribution.bates should return a n-sample of a bates distribution"},{"id":"122","name":"numbers mean should return average value amongst integers in an array"},{"id":"123","name":"numbers median should return middle value in array for a sorted array with an odd number of values"},{"id":"124","name":"numbers median should return middle value in array for an unsorted array with an odd number of values"},{"id":"125","name":"numbers median should return average of two middle values in array for a sorted array with an even number of values"},{"id":"126","name":"numbers median should return average of two middle values in array for an unsorted array with an even number of values"},{"id":"127","name":"numbers mode should return most common value in array"},{"id":"128","name":"numbers quantile should return lowest value in array for 0th q-quantile of an unsorted array"},{"id":"129","name":"numbers quantile should return highest value in array for qth q-quantile of an unsorted array"},{"id":"130","name":"numbers quantile should return average of two values in array for an unsorted array's length is a multiple of (k / q)"},{"id":"131","name":"numbers quantile should return value at 0-based index floor(k/q) in array for an unsorted array's length is not a multiple of (k/q)"},{"id":"132","name":"numbers should return the standard deviation of an array of numbers"},{"id":"133","name":"numbers should return correlation between two arrays"},{"id":"134","name":"numbers should return a function to calculate the linear regression of a set of points"},{"id":"135","name":"numbers should return a function to calculate the exponential regression of an array of numbers"},{"id":"136","name":"numbers should return an appropriate Coefficient of Determination for a given dataset and regression"},{"id":"137","name":"numbers should return covariance between two arrays"}]}},"projectRoot":"/Users/lily/Dropbox/Mac (2)/Documents/Github/SSVT/Lily/Wk6/numbers.js","config":{"packageManager":"npm","reporters":["html","clear-text","progress","json"],"mutate":["lib/numbers/basic.js"],"testRunner":"mocha","coverageAnalysis":"perTest","concurrency":4,"timeoutMS":2000,"mochaOptions":{"ui":"tdd"},"plugins":["/Users/lily/Dropbox/Mac (2)/Documents/Github/SSVT/Lily/Wk6/stryker-js/packages/mocha-runner/dist/src/index.js","/Users/lily/Dropbox/Mac (2)/Documents/Github/SSVT/Lily/Wk6/stryker-js/packages/core/dist/src/reporters/index.js"],"allowConsoleColors":true,"checkers":[],"maxTestRunnerReuse":0,"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"mutator":{"plugins":null,"excludedMutations":[]},"appendPlugins":[],"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"configFile":"/Users/lily/Dropbox/Mac (2)/Documents/Github/SSVT/Lily/Wk6/numbers.js/stryker.conf.js"},"framework":{"name":"StrykerJS","version":"5.4.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"mocha":"5.2.0"}}}